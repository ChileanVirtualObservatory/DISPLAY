import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pickle
import display.create_cube
import display.create_words

from display.detect import *

import spams

def save_dictionary(D):
    output = open('dictionary.pkl', 'wb')
    pickle.dump(D, output)
    output.close()

def load_dictionary():
    input_file = open('dictionary.pkl', "rb" )
    D = pickle.load( input_file )
    input_file.close()
    return D

def get_fortran_array(input):
    fort_array = np.asfortranarray(np.asmatrix(input)).T
    fort_array = np.asfortranarray(fort_array, dtype= np.double)
    return fort_array

def show_alphas_in_isolist(alpha, isolist):
    for p in xrange(0, len(alpha)):
        if dictionary.columns[p] in isolist:
            print "*" + dictionary.columns[p] + ": " +  str(alpha[p])
        else:
            print dictionary.columns[p] + ": " +  str(alpha[p])

def show_words(dictionary, isolist):
    for p in isolist:
        plt.plot(dictionary[p])
        plt.show()

def show_recall(Results):
    for fscore in Results['Recall'].index:
        print fscore + "   " + str(Results['Recall'].loc[fscore])

def show_precision(Results):
    for fscore in Results['Precision'].index:
        print fscore + "   " + str(Results['Precision'].loc[fscore])

def show_fscore(Results):
    for fscore in Results['F-Score'].index:
        print fscore + "   " + str(Results['F-Score'].loc[fscore])


# Dictionary of molecules and its respective isotopes.
molist = {
            'CO' : ('COv=0','COv=1','13COv=0','C18O','C17O','13C17O','13C18O'),
            # Carbon Monoxide

            # 'NH2' : ('NH2'), # Amidogen

            'N2H' : ('N2H+v=0', 'N2D+', '15NNH+', 'N15NH+'), # Diazenylium

            'CN' : ('CNv=0', '13CN', 'C15N'), # Cyanide Radical

            'HCN' : ('HCNv=0', 'HCNv2=1', 'HCNv2=2','HCNv3=1', 'HC15Nv=0',
                     'H13CNv2=1', 'H13CNv=0', 'HCNv1=1', 'DCNv=0',
                     'DCNv2=1', 'HCNv2=4', 'HCNv2=1^1-v2=4^0'),
            # Hydrogen Cyanide

            # 'H2CN' : ('H2CN'), # Methylene amidogen

            'CS' : ('CSv=0', '13C34Sv=0', 'C36Sv=0', 'C34Sv=0', 'CSv=1-0',
                    '13CSv=0', 'C33Sv=0', 'CSv=1', 'C34Sv=1'),
            # Carbon Monosulfide

            'CCS' : ('CCS', 'C13CS', '13CCS', 'CC34S'), # Thioxoethenylidene

            'H2S' : ('H2S', 'H234S', 'D2S'), # Hydrogen sulfide

            'H2CS' : ('H2CS', 'H213CS', 'H2C34S'), # Thioformaldehyde

            'SO2' : ('SO2v=0', '33SO2', '34SO2v=0', 'SO2v2=1'),
            # Sulfur Dioxide

            'OSO' : ('OS18O', 'OS17O'),# Sulfur Dioxide

            'H2CO' : ('H2CO', 'H2C18O', 'H213CO'), # Formaldehyde

            'HCO' : ('HCO+v=0', 'HC18O+', 'HC17O+', 'H13CO+'), # Formylium

            # 'HC3N' : ('HC3Nv=0'), # Cyanoacetylene

            'HC5N' : ('HC5Nv=0', 'HC5Nv11=1', 'HCC13CCCN', 'HCCCC13CN',
                      'HCCC13CCN', 'H13CCCCCN'), # Cyanobutadiyne

            'CH3OH' : ('CH3OHvt=0', '13CH3OHvt=0 ', 'CH318OH', 'CH3OHvt=1 ',
                       '13CH3OHvt=1 ') # Methanol
          }



# if __name__ == "__main__":


# Subset of molist to use in the simulation to generate spectral lines
#
#       @Test: Isotopes with theoretical lines on the Band 9 (602 - 720 Ghz),
#       in a sample of 4 Ghz with resolution 1 Mhz, Sample: [602 - 606]
#       HC15Nv=0
#       H13CNv2=1
#       H13CNv=0
#       H213CS
#       H2C34S
#       SO2v=0
#       33SO2
#       34SO2v=0
#       SO2v2=1
#       OS18O
#       OS17O
#       H2C18O
#       H213CO
#


# Function to create a fit containing an observed object (a Datacube
# ALMA-like) using ASYDO Project. Parameters:
#
#         - isolist     : list subset of the list of isotopes to generate a cube
#         - cube_name    : filename of the .fits generated by the simulation
#         - cube_params : parameters for the simulation of the cube


isolist = set(['HC15Nv=0', 'H13CNv2=1', 'H13CNv=0', 'H213CS',
               '34SO2v=0','SO2v2=1','OS18O','OS17O','H2C18O', 'H213CO'])
cube_name = 'observed_cube'
# cube_name_without_noise = 'observed_cube_without_noise'
#         Creation of a Data cube that needs the following parameters:
#
#         - freq    : spectral center (frequency)
#         - alpha   : right-ascension center
#         - delta   : declination center
#         - spe_res : spectral resolution
#         - spe_bw  : spectral bandwidth
#         - s_f     : the width of the spectral lines (fwhm)
cube_params = {
  'freq'     : 604000,
  'alpha'    : 0,
  'delta'    : 0,
  'spe_bw'   : 4000,
  'spe_res'  : 1,
  's_f'      : 85
              }
# display.create_cube.gen_cube(isolist, cube_params, cube_name, white_noise=True)
# display.create_cube.gen_cube(isolist, cube_params, cube_name_without_noise,
#                       white_noise=False)

# Function to create the words necessary to fit a sparse coding model
# to the observed spectra in the previous created cube. It uses:
# Returns a DataFrame with a vector for each theoretical line for each isotope
# in molist
# dictionary = display.create_words.gen_words(molist, cube_params)
# save_dictionary(dictionary)
dictionary = load_dictionary()

# Training
#
#
file_path = cube_name + '.fits'
# file_path_without_noise = cube_name_without_noise + '.fits'
Detector = Detect(cube_params, file_path, (1, 1))
dictionary_recal, X = Detector.train(dictionary)

y_train = get_fortran_array(np.asmatrix(X))
dictionary_recal_fa = np.asfortranarray(dictionary_recal, dtype= np.double)

param = {
  'lambda1' : 1000, # practically unrestricted = 1000
  # 'lambda2' : 0.1,
  # 'L': 1,
  'pos' : True,
  'mode' : 0,
  'ols' : True,
  'numThreads' : -1} # number of cores to use; the default choice is -1
# and uses all the cores of the machine
alpha = spams.lasso(y_train, dictionary_recal_fa, **param).toarray()
total = np.inner(dictionary_recal_fa, alpha.T)

# show_alphas_in_isolist(alpha, isolist)



# Testing
#
#
# show_alphas_in_isolist(alpha, isolist)
lines = Detector.get_lines_from_fits()
for freq in lines.index:
    plt.axvline(x=freq, ymin=0, ymax= 1, color='g')
    plt.text(freq, 1, lines[freq], size='smaller', rotation='vertical')
plt.plot(Detector.get_freq_index_from_params(), y_train, color='r', label='Observed')
plt.plot(Detector.get_freq_index_from_params(), total, color='b', label='Recovered', linestyle='--')
for freq in range(cube_params['spe_bw']):
    if np.mean(dictionary_recal.iloc[freq]) != 0:
        for mol_ix in range(len(dictionary_recal.columns)):
            mol = dictionary_recal.columns[mol_ix]
            if dictionary_recal[mol].iloc[freq] != 0 and alpha[mol_ix] != 0:
                plt.text(freq, 1.2, mol, size='smaller', rotation='vertical')
plt.legend(loc='upper right')

plt.show()



# Confusion Matrix construction
set_isotopes = set()

for freq in range(cube_params['spe_bw']):
    if np.mean(dictionary_recal.iloc[freq]) != 0:
        for mol_ix in range(len(dictionary_recal.columns)):
            mol = dictionary_recal.columns[mol_ix]
            if dictionary_recal[mol].iloc[freq] != 0 and alpha[mol_ix] != 0:
                    set_isotopes.add(mol)
for line in lines:
    set_isotopes.add(line)

MatrixConfusion = pd.DataFrame(np.zeros(
                                        (len(set_isotopes),
                                        len(set_isotopes))
                                        ),
                                index=set_isotopes,
                                columns=set_isotopes)

# print "Observed"
for freq in range(cube_params['spe_bw']):
    if np.mean(dictionary_recal.iloc[freq]) != 0:
        # print dictionary_recal.index[freq]
        sum = 0
        TempAlpha = pd.Series()
        for mol_ix in range(len(dictionary_recal.columns)):
            mol = dictionary_recal.columns[mol_ix]
            if dictionary_recal[mol].iloc[freq] != 0 and alpha[mol_ix] != 0:
                    # print mol + ": " + str(alpha[mol_ix])
                    TempAlpha[mol] = alpha[mol_ix]
                    sum += alpha[mol_ix]
        TempAlpha = TempAlpha/sum

        # print " closest line "
        closest_line = lines[min(lines.index, key=lambda x:abs(x-dictionary_recal.index[freq]))]
        # print closest_line

        for isotope in TempAlpha.index:
            MatrixConfusion[isotope].loc[closest_line] += TempAlpha[isotope]

Results = pd.DataFrame(np.zeros((len(set_isotopes), 3)),
                  index=set_isotopes, columns=['Precision', 'Recall',
                                                  'F-Score'])

for isotope in set_isotopes:
    true_positives = 0
    total = 0
    for row in MatrixConfusion.index:
        if isotope == row:
            true_positives = MatrixConfusion.loc[row][isotope]
        total += MatrixConfusion.loc[row][isotope]
    if total != 0:
        Results['Recall'].loc[isotope] = true_positives/total

for isotope in set_isotopes:
    true_positives = 0
    total = 0
    for column in MatrixConfusion.columns:
        if column == isotope:
            true_positives += MatrixConfusion.loc[isotope][column]
        total += MatrixConfusion.loc[isotope][column]
    if total != 0:
        Results['Precision'].loc[isotope] = true_positives/total

for isotope in set_isotopes:
    recall = Results['Recall'].loc[isotope]
    precision = Results['Precision'].loc[isotope]
    if recall != 0 or precision != 0:
        Results['F-Score'].loc[isotope] = 2.*(recall*precision)/(recall + precision)
