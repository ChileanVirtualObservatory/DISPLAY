import asydopy.vu
import random
import math
import sys
import numpy as np
import pandas as pd

# Without redshift (Rvel = 0)
# Temp 300 Kelvin
rvel = 0.0
temp = 300.0

if __name__ != "create_cube":

    # Function to create a fit containing an observed object (a Datacube
    # ALMA-like) using ASYDO Project. Parameters:
    #
    #         - isolist     : list subset of the list of isotopes to generate a cube
    #         - cube_name    : filename of the .fits generated by the simulation
    #         - cube_params : parameters for the simulation of the cube
    def gen_cube(isolist, cube_params, cube_name, white_noise):

        log = sys.stdout
        dbpath = 'ASYDO'

        univ=asydopy.vu.Universe(log)

        for mol in isolist:

            univ.create_source('observed-'+mol, cube_params['alpha'],
                                 cube_params['delta'])
            s_x=random.uniform(50, 150)
            s_y=random.uniform(40, 100)
            rot=random.uniform(10, 150)
            s_f=cube_params['s_f']
            angle=random.uniform(0,math.pi)

            model=asydopy.vu.IMCM(log,dbpath, mol, temp,
                                  ('normal',s_x,s_y,angle),
                                  ('skew',cube_params['s_f'],0),
                                  ('linear',angle,rot))

            model.set_radial_velocity(rvel)
            univ.add_component('observed-'+mol, model)

        cube = univ.gen_cube('observerd', cube_params['alpha'],
                                 cube_params['delta'], cube_params['freq'],
                                 10, 90, cube_params['spe_res'],
                                 cube_params['spe_bw'],
                                 white_noise)

        univ.save_cube(cube, cube_name + '.fits')

if __name__ == "__main__":
    pass
